{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include JWT token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('jwt');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// API functions\nexport const authAPI = {\n  signup: userData => api.post('/api/auth/signup', userData),\n  login: credentials => api.post('/api/auth/login', credentials)\n};\nexport const quizAPI = {\n  // Quiz operations\n  getAllQuizzes: () => api.get('/api/quiz'),\n  getQuiz: quizId => api.get(`/api/quiz/${quizId}`),\n  createQuiz: quizData => api.post('/api/quiz', quizData),\n  updateQuiz: (quizId, quizData) => api.post(`/api/quiz/${quizId}`, quizData),\n  // Question operations\n  getQuestions: quizId => api.get(`/api/quiz/${quizId}/question`),\n  getQuestion: (quizId, questionId) => api.get(`/api/quiz/${quizId}/question/${questionId}`),\n  createQuestion: (quizId, questionData) => api.post(`/api/quiz/${quizId}/question`, questionData),\n  createOrUpdateQuestion: (quizId, questionId, questionData) => api.post(`/api/quiz/${quizId}/question/${questionId}`, questionData)\n};\n\n// Legacy API for backward compatibility\nexport const gameAPI = {\n  createGame: () => quizAPI.createQuiz({\n    title: 'New Quiz',\n    description: 'Created from question creator'\n  }),\n  createQuestion: (gameId, questionId, questionData) => quizAPI.createOrUpdateQuestion(gameId, questionId, questionData)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","authAPI","signup","userData","post","login","credentials","quizAPI","getAllQuizzes","get","getQuiz","quizId","createQuiz","quizData","updateQuiz","getQuestions","getQuestion","questionId","createQuestion","questionData","createOrUpdateQuestion","gameAPI","createGame","title","description","gameId"],"sources":["C:/Users/mordy.arnon/exten/kahoot-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include JWT token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('jwt');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API functions\r\nexport const authAPI = {\r\n  signup: (userData) => api.post('/api/auth/signup', userData),\r\n  login: (credentials) => api.post('/api/auth/login', credentials),\r\n};\r\n\r\nexport const quizAPI = {\r\n  // Quiz operations\r\n  getAllQuizzes: () => api.get('/api/quiz'),\r\n  getQuiz: (quizId) => api.get(`/api/quiz/${quizId}`),\r\n  createQuiz: (quizData) => api.post('/api/quiz', quizData),\r\n  updateQuiz: (quizId, quizData) => api.post(`/api/quiz/${quizId}`, quizData),\r\n  \r\n  // Question operations\r\n  getQuestions: (quizId) => api.get(`/api/quiz/${quizId}/question`),\r\n  getQuestion: (quizId, questionId) => api.get(`/api/quiz/${quizId}/question/${questionId}`),\r\n  createQuestion: (quizId, questionData) => api.post(`/api/quiz/${quizId}/question`, questionData),\r\n  createOrUpdateQuestion: (quizId, questionId, questionData) => \r\n    api.post(`/api/quiz/${quizId}/question/${questionId}`, questionData),\r\n};\r\n\r\n// Legacy API for backward compatibility\r\nexport const gameAPI = {\r\n  createGame: () => quizAPI.createQuiz({ title: 'New Quiz', description: 'Created from question creator' }),\r\n  createQuestion: (gameId, questionId, questionData) => \r\n    quizAPI.createOrUpdateQuestion(gameId, questionId, questionData),\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;EACzC,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBC,MAAM,EAAGC,QAAQ,IAAKpB,GAAG,CAACqB,IAAI,CAAC,kBAAkB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGC,WAAW,IAAKvB,GAAG,CAACqB,IAAI,CAAC,iBAAiB,EAAEE,WAAW;AACjE,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG;EACrB;EACAC,aAAa,EAAEA,CAAA,KAAMzB,GAAG,CAAC0B,GAAG,CAAC,WAAW,CAAC;EACzCC,OAAO,EAAGC,MAAM,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,aAAaE,MAAM,EAAE,CAAC;EACnDC,UAAU,EAAGC,QAAQ,IAAK9B,GAAG,CAACqB,IAAI,CAAC,WAAW,EAAES,QAAQ,CAAC;EACzDC,UAAU,EAAEA,CAACH,MAAM,EAAEE,QAAQ,KAAK9B,GAAG,CAACqB,IAAI,CAAC,aAAaO,MAAM,EAAE,EAAEE,QAAQ,CAAC;EAE3E;EACAE,YAAY,EAAGJ,MAAM,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,aAAaE,MAAM,WAAW,CAAC;EACjEK,WAAW,EAAEA,CAACL,MAAM,EAAEM,UAAU,KAAKlC,GAAG,CAAC0B,GAAG,CAAC,aAAaE,MAAM,aAAaM,UAAU,EAAE,CAAC;EAC1FC,cAAc,EAAEA,CAACP,MAAM,EAAEQ,YAAY,KAAKpC,GAAG,CAACqB,IAAI,CAAC,aAAaO,MAAM,WAAW,EAAEQ,YAAY,CAAC;EAChGC,sBAAsB,EAAEA,CAACT,MAAM,EAAEM,UAAU,EAAEE,YAAY,KACvDpC,GAAG,CAACqB,IAAI,CAAC,aAAaO,MAAM,aAAaM,UAAU,EAAE,EAAEE,YAAY;AACvE,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG;EACrBC,UAAU,EAAEA,CAAA,KAAMf,OAAO,CAACK,UAAU,CAAC;IAAEW,KAAK,EAAE,UAAU;IAAEC,WAAW,EAAE;EAAgC,CAAC,CAAC;EACzGN,cAAc,EAAEA,CAACO,MAAM,EAAER,UAAU,EAAEE,YAAY,KAC/CZ,OAAO,CAACa,sBAAsB,CAACK,MAAM,EAAER,UAAU,EAAEE,YAAY;AACnE,CAAC;AAED,eAAepC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}